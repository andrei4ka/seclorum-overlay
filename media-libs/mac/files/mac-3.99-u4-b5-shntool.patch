diff -ur mac-3.99-u4-b5/src/MACLib/WAVInputSource.cpp mac-3.99-u4-b5-shntool/src/MACLib/WAVInputSource.cpp
--- mac-3.99-u4-b5/src/MACLib/WAVInputSource.cpp	2006-06-01 05:00:57.000000000 -0400
+++ mac-3.99-u4-b5-shntool/src/MACLib/WAVInputSource.cpp	2006-12-03 01:48:31.000000000 -0500
@@ -31,7 +31,26 @@
     uint32 nChunkBytes;  // the bytes of the chunk  
 };
 
+#ifdef SHNTOOL
+unsigned long LE_LONG(unsigned char * buf)
+/* converts 4 bytes stored in little-endian format to an unsigned long */
+{
+	return (unsigned long)((buf[3] << 24) + (buf[2] << 16) + (buf[1] << 8) + buf[0]);
+}
+ 
+unsigned short LE_SHORT(unsigned char * buf)
+/* converts 2 bytes stored in little-endian format to an unsigned short */
+{
+	return (unsigned short)((buf[1] << 8) + buf[0]);
+}
+#endif
 
+#ifdef SHNTOOL
+CInputSource * CreateInputSource(const wchar_t * pSourceName, WAVEFORMATEX * pwfeSource, int * pTotalBlocks, int * pHeaderBytes, int * pTerminatingBytes, int * pErrorCode)
+{ 
+	return new CWAVInputSource(pSourceName, pwfeSource, pTotalBlocks, pHeaderBytes, pTerminatingBytes, pErrorCode);
+}
+#else
 CInputSource * CreateInputSource(const wchar_t * pSourceName, WAVEFORMATEX * pwfeSource, int * pTotalBlocks, int * pHeaderBytes, int * pTerminatingBytes, int * pErrorCode)
 { 
     // error check the parameters
@@ -58,6 +77,7 @@
         return NULL;
     }
 }
+#endif
 
 CWAVInputSource::CWAVInputSource(CIO * pIO, WAVEFORMATEX * pwfeSource, int * pTotalBlocks, int * pHeaderBytes, int * pTerminatingBytes, int * pErrorCode)
     : CInputSource(pIO, pwfeSource, pTotalBlocks, pHeaderBytes, pTerminatingBytes, pErrorCode)
@@ -137,6 +157,107 @@
     header->nBitsPerSample = swap_int16(header->nBitsPerSample);
 }
 
+#ifdef SHNTOOL
+int CWAVInputSource::AnalyzeSource()
+{
+	unsigned char *p = FULL_HEADER, *priff = NULL;
+
+	// seek to the beginning (just in case)
+	m_spIO->Seek(0, FILE_BEGIN);
+
+	// get the file size
+	m_nFileBytes = m_spIO->GetSize();
+
+	// get the RIFF header
+	RETURN_ON_ERROR(ReadSafe(m_spIO, p, sizeof(RIFF_HEADER)))
+
+	// make sure the RIFF header is valid
+	if (!(p[0] == 'R' && p[1] == 'I' && p[2] == 'F' && p[3] == 'F'))
+		return ERROR_INVALID_INPUT_FILE;
+	p += sizeof(RIFF_HEADER);
+
+	// read the data type header
+	RETURN_ON_ERROR(ReadSafe(m_spIO, p, sizeof(DATA_TYPE_ID_HEADER)))
+
+	// make sure it's the right data type
+	if (!(p[0] == 'W' && p[1] == 'A' && p[2] == 'V' && p[3] == 'E'))
+		return ERROR_INVALID_INPUT_FILE;
+	p += sizeof(DATA_TYPE_ID_HEADER);
+
+	// find the 'fmt ' chunk
+	RETURN_ON_ERROR(ReadSafe(m_spIO, p, sizeof(RIFF_CHUNK_HEADER)))
+
+	while (!(p[0] == 'f' && p[1] == 'm' && p[2] == 't' && p[3] == ' ')) 
+	{
+		p += sizeof(RIFF_CHUNK_HEADER);
+
+		// move the file pointer to the end of this chunk
+		RETURN_ON_ERROR(ReadSafe(m_spIO, p, LE_LONG(p+4)))
+		p += LE_LONG(p+4);
+
+		// check again for the data chunk
+		RETURN_ON_ERROR(ReadSafe(m_spIO, p, sizeof(RIFF_CHUNK_HEADER)))
+    }
+
+	priff = p+4;
+	p += sizeof(RIFF_CHUNK_HEADER);
+
+	// read the format info
+	RETURN_ON_ERROR(ReadSafe(m_spIO, p, sizeof(WAV_FORMAT_HEADER)))
+
+	// error check the header to see if we support it
+	if (LE_SHORT(p) != 1)
+		return ERROR_INVALID_INPUT_FILE;
+
+	// copy the format information to the WAVEFORMATEX passed in
+	FillWaveFormatEx(&m_wfeSource, LE_LONG(p+4), LE_SHORT(p+14), LE_SHORT(p+2));
+
+	p += sizeof(WAV_FORMAT_HEADER);
+
+	// skip over any extra data in the header
+	int nWAVFormatHeaderExtra = LE_LONG(priff) - sizeof(WAV_FORMAT_HEADER);
+	if (nWAVFormatHeaderExtra < 0)
+		return ERROR_INVALID_INPUT_FILE;
+	else {
+		RETURN_ON_ERROR(ReadSafe(m_spIO, p, nWAVFormatHeaderExtra))
+		p += nWAVFormatHeaderExtra;
+	}
+
+	// find the data chunk
+	RETURN_ON_ERROR(ReadSafe(m_spIO, p, sizeof(RIFF_CHUNK_HEADER)))
+
+	while (!(p[0] == 'd' && p[1] == 'a' && p[2] == 't' && p[3] == 'a')) 
+	{
+		p += sizeof(RIFF_CHUNK_HEADER);
+
+		// move the file pointer to the end of this chunk
+		RETURN_ON_ERROR(ReadSafe(m_spIO, p, LE_LONG(p+4)))
+		p += LE_LONG(p+4);
+
+		// check again for the data chunk
+		RETURN_ON_ERROR(ReadSafe(m_spIO, p, sizeof(RIFF_CHUNK_HEADER))) 
+	}
+
+	// we're at the data block
+	m_nDataBytes = LE_LONG(p+4);
+	if (m_nDataBytes < 0)
+		m_nDataBytes = m_nFileBytes - m_nHeaderBytes;
+
+	p += sizeof(RIFF_CHUNK_HEADER);
+
+	m_nHeaderBytes = p - FULL_HEADER;
+
+	// make sure the data bytes is a whole number of blocks
+	if ((m_nDataBytes % m_wfeSource.nBlockAlign) != 0)
+		return ERROR_INVALID_INPUT_FILE;
+
+	// calculate the terminating byts
+	m_nTerminatingBytes = 0;
+
+	// we made it this far, everything must be cool
+	return ERROR_SUCCESS;
+}
+#else
 int CWAVInputSource::AnalyzeSource()
 {
     // seek to the beginning (just in case)
@@ -226,6 +347,7 @@
     // we made it this far, everything must be cool
     return ERROR_SUCCESS;
 }
+#endif
 
 int CWAVInputSource::GetData(unsigned char * pBuffer, int nBlocks, int * pBlocksRetrieved)
 {
@@ -242,6 +364,19 @@
     return ERROR_SUCCESS;
 }
 
+#ifdef SHNTOOL
+int CWAVInputSource::GetHeaderData(unsigned char * pBuffer)
+{
+	int i;
+
+	if (!m_bIsValid) return ERROR_UNDEFINED;
+
+	for (i=0;i<m_nHeaderBytes;i++)
+		*(pBuffer + i) = *(FULL_HEADER + i);
+
+	return ERROR_SUCCESS;
+}
+#else
 int CWAVInputSource::GetHeaderData(unsigned char * pBuffer)
 {
     if (!m_bIsValid) return ERROR_UNDEFINED;
@@ -267,6 +402,7 @@
 
     return nRetVal;
 }
+#endif
 
 int CWAVInputSource::GetTerminatingData(unsigned char * pBuffer)
 {
diff -ur mac-3.99-u4-b5/src/MACLib/WAVInputSource.h mac-3.99-u4-b5-shntool/src/MACLib/WAVInputSource.h
--- mac-3.99-u4-b5/src/MACLib/WAVInputSource.h	2006-06-01 05:00:58.000000000 -0400
+++ mac-3.99-u4-b5-shntool/src/MACLib/WAVInputSource.h	2006-12-03 01:49:54.000000000 -0500
@@ -3,6 +3,10 @@
 
 #include "IO.h"
 
+#ifdef SHNTOOL
+#define FULL_HEADER_SIZE 32768
+#endif
+
 /*************************************************************************************
 CInputSource - base input format class (allows multiple format support)
 *************************************************************************************/
@@ -54,6 +58,9 @@
     int m_nTerminatingBytes;
     int m_nFileBytes;
     BOOL m_bIsValid;
+#ifdef SHNTOOL
+    unsigned char FULL_HEADER[FULL_HEADER_SIZE];
+#endif
 };
 
 /*************************************************************************************
diff -ur mac-3.99-u4-b5/src/Shared/WinFileIO.cpp mac-3.99-u4-b5-shntool/src/Shared/WinFileIO.cpp
--- mac-3.99-u4-b5/src/Shared/WinFileIO.cpp	2006-06-01 05:00:56.000000000 -0400
+++ mac-3.99-u4-b5-shntool/src/Shared/WinFileIO.cpp	2006-12-03 01:55:41.000000000 -0500
@@ -18,6 +18,55 @@
     Close();
 }
 
+#ifdef SHNTOOL
+int CWinFileIO::Open(const wchar_t * pName)
+{
+	Close();
+
+	#ifdef _UNICODE
+		CSmartPtr<wchar_t> spName((wchar_t *) pName, TRUE, FALSE);
+	#else
+		CSmartPtr<char> spName(GetANSIFromUTF16(pName), TRUE);
+	#endif
+
+	if ( 0 == strcmp ((const char *)pName, "-") || 0 == strcmp ((const char *)pName, "/dev/stdin") )
+	{
+		m_hFile = GetStdHandle (STD_INPUT_HANDLE);
+		m_bReadOnly = TRUE;
+		// ReadOnly
+	}
+	else if ( 0 == strcmp ((const char *)pName, "/dev/stdout") )
+	{
+		m_hFile = GetStdHandle (STD_OUTPUT_HANDLE);
+		m_bReadOnly = FALSE;
+		// WriteOnly
+	}
+	else
+	{
+		m_hFile = ::CreateFile(spName, GENERIC_READ | GENERIC_WRITE, FILE_SHARE_READ | FILE_SHARE_WRITE, NULL, OPEN_EXISTING, FILE_ATTRIBUTE_NORMAL, NULL);
+		if (m_hFile == INVALID_HANDLE_VALUE)
+		{
+			m_hFile = ::CreateFile(spName, GENERIC_READ, FILE_SHARE_READ, NULL, OPEN_EXISTING, FILE_ATTRIBUTE_NORMAL, NULL);
+			if (m_hFile == INVALID_HANDLE_VALUE)
+			{
+				return -1;
+			}
+			else
+			{
+				m_bReadOnly = TRUE;
+			}
+		}
+		else
+		{
+			m_bReadOnly = FALSE;
+		}
+	}
+
+	wcscpy(m_cFileName, pName);
+
+	return 0;
+}
+#else
 int CWinFileIO::Open(const wchar_t * pName)
 {
     Close();
@@ -50,6 +99,7 @@
 
     return 0;
 }
+#endif
 
 int CWinFileIO::Close()
 {
